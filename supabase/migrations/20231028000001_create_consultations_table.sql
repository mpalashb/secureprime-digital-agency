-- Create a table for storing consultation form submissions
CREATE TABLE consultations (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  full_name TEXT NOT NULL,
  email TEXT NOT NULL,
  company TEXT,
  phone TEXT NOT NULL,
  service TEXT NOT NULL,
  consultation_type TEXT NOT NULL,
  preferred_date DATE,
  preferred_time TEXT,
  project_description TEXT,
  project_budget TEXT,
  project_timeline TEXT,
  additional_information TEXT,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- Add comments to the table and columns
COMMENT ON TABLE consultations IS 'Stores consultation form submissions from the website';
COMMENT ON COLUMN consultations.id IS 'Unique identifier for each consultation submission';
COMMENT ON COLUMN consultations.full_name IS 'Full name of the person requesting consultation';
COMMENT ON COLUMN consultations.email IS 'Email address of the person requesting consultation';
COMMENT ON COLUMN consultations.company IS 'Company name of the person requesting consultation (optional)';
COMMENT ON COLUMN consultations.phone IS 'Phone number of the person requesting consultation';
COMMENT ON COLUMN consultations.service IS 'Service type the person is interested in';
COMMENT ON COLUMN consultations.consultation_type IS 'Type of consultation requested';
COMMENT ON COLUMN consultations.preferred_date IS 'Preferred date for consultation (optional)';
COMMENT ON COLUMN consultations.preferred_time IS 'Preferred time for consultation (optional)';
COMMENT ON COLUMN consultations.project_description IS 'Description of the project (optional)';
COMMENT ON COLUMN consultations.project_budget IS 'Budget range for the project (optional)';
COMMENT ON COLUMN consultations.project_timeline IS 'Timeline for the project (optional)';
COMMENT ON COLUMN consultations.additional_information IS 'Additional information or special requests (optional)';
COMMENT ON COLUMN consultations.created_at IS 'Timestamp when the record was created';
COMMENT ON COLUMN consultations.updated_at IS 'Timestamp when the record was last updated';

-- Create indexes for faster lookups
CREATE INDEX idx_consultations_email ON consultations(email);
CREATE INDEX idx_consultations_preferred_date ON consultations(preferred_date);

-- Create a trigger function to update the updated_at timestamp
CREATE OR REPLACE FUNCTION handle_consultations_updated_at()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Create a trigger to automatically update the updated_at column
CREATE TRIGGER handle_consultations_updated_at
  BEFORE UPDATE ON consultations
  FOR EACH ROW
  EXECUTE FUNCTION handle_consultations_updated_at();

-- Set up Row Level Security (RLS)
ALTER TABLE consultations ENABLE ROW LEVEL SECURITY;

-- Create a policy to allow insert operations for all users (anonymous)
CREATE POLICY "Allow anonymous insert" ON consultations
  FOR INSERT WITH CHECK (true);

-- Create a policy to allow select operations for authenticated users
CREATE POLICY "Allow authenticated select" ON consultations
  FOR SELECT USING (auth.role() = 'authenticated');