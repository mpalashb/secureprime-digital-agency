-- Create a table for storing contact form submissions
CREATE TABLE contacts (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name TEXT NOT NULL,
  email TEXT NOT NULL,
  message TEXT NOT NULL,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- Add comments to the table and columns
COMMENT ON TABLE contacts IS 'Stores contact form submissions from the website';
COMMENT ON COLUMN contacts.id IS 'Unique identifier for each contact submission';
COMMENT ON COLUMN contacts.name IS 'Name of the person submitting the form';
COMMENT ON COLUMN contacts.email IS 'Email address of the person submitting the form';
COMMENT ON COLUMN contacts.message IS 'Message content from the contact form';
COMMENT ON COLUMN contacts.created_at IS 'Timestamp when the record was created';
COMMENT ON COLUMN contacts.updated_at IS 'Timestamp when the record was last updated';

-- Create an index on the email column for faster lookups
CREATE INDEX idx_contacts_email ON contacts(email);

-- Create a trigger function to update the updated_at timestamp
CREATE OR REPLACE FUNCTION handle_updated_at()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Create a trigger to automatically update the updated_at column
CREATE TRIGGER handle_contacts_updated_at
  BEFORE UPDATE ON contacts
  FOR EACH ROW
  EXECUTE FUNCTION handle_updated_at();

-- Set up Row Level Security (RLS)
ALTER TABLE contacts ENABLE ROW LEVEL SECURITY;

-- Create a policy to allow insert operations for all users (anonymous)
CREATE POLICY "Allow anonymous insert" ON contacts
  FOR INSERT WITH CHECK (true);

-- Create a policy to allow select operations for authenticated users
CREATE POLICY "Allow authenticated select" ON contacts
  FOR SELECT USING (auth.role() = 'authenticated');